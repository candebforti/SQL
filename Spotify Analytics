# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

SELECT * FROM BIT_DB.Spotifydata
;

#How danceable are the artists over all their songs?
SELECT DISTINCT artist_name, AVG(danceability) as avg_dance
FROM Spotifydata
GROUP BY artist_name
ORDER BY avg_dance DESC;

#What artists have the same popularity as another one?
SELECT a.artist_Name AS ArtistName1, B.artist_name AS ArtistName2, A.popularity
FROM Spotifydata A, Spotifydata B
WHERE A.artist_name <> B.artist_name
AND A.popularity = B.popularity
ORDER BY A.popularity DESC;

#Who is the artist who has the song with the most energy?
SELECT artist_name, 
energy
FROM Spotifydata
ORDER BY energy DESC
LIMIT 1;

#Whats the energy song average, and classified songs by their energy
SELECT avg(energy)
FROM spotifydata;

SELECT track_name,
CASE
    WHEN energy > '[0.64]%' THEN 'Above_avergae'
    WHEN energy = '[0.64]%' THEN 'Average'
    ELSE 'Below_Average'
    END AS 'Energy_avg'
    FROM spotifydata;
